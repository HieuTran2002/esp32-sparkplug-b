/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_SMALLPLUG_SMALLPLUG_B_PB_H_INCLUDED
#define PB_SMALLPLUG_SMALLPLUG_B_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _smallplug_DataType {
    smallplug_DataType_Int8 = 1,
    smallplug_DataType_Int16 = 2,
    smallplug_DataType_Int32 = 3,
    smallplug_DataType_Int64 = 4,
    smallplug_DataType_UInt8 = 5,
    smallplug_DataType_UInt16 = 6,
    smallplug_DataType_UInt32 = 7,
    smallplug_DataType_UInt64 = 8,
    smallplug_DataType_Float = 9,
    smallplug_DataType_Double = 10,
    smallplug_DataType_Boolean = 11,
    smallplug_DataType_String = 12,
    smallplug_DataType_DateTime = 13,
    smallplug_DataType_Text = 14,
    /* Additional Metric Types */
    smallplug_DataType_UUID = 15,
    smallplug_DataType_Bytes = 17,
    smallplug_DataType_File = 18
} smallplug_DataType;

/* Struct definitions */
typedef struct _smallplug_Payload {
    bool has_timestamp;
    uint64_t timestamp; /* Timestamp at message sending time */
    pb_callback_t metrics; /* Repeated forever - no limit in Google Protobufs */
    bool has_seq;
    uint64_t seq; /* Sequence number */
    pb_callback_t uuid; /* UUID to track message type in terms of schema definitions */
    pb_callback_t body; /* To optionally bypass the whole definition above */
} smallplug_Payload;

typedef struct _smallplug_Payload_Metric {
    pb_callback_t name; /* Metric name - should only be included on birth */
    bool has_alias;
    uint64_t alias; /* Metric alias - tied to name on birth and included in all later DATA messages */
    bool has_timestamp;
    uint64_t timestamp; /* Timestamp associated with data acquisition time */
    bool has_datatype;
    uint32_t datatype; /* DataType of the metric/tag value */
    bool has_is_historical;
    bool is_historical; /* If this is historical data and should not update real time tag */
    bool has_is_transient;
    bool is_transient; /* Tells consuming clients such as MQTT Engine to not store this as a tag */
    bool has_is_null;
    bool is_null; /* If this is null - explicitly say so rather than using -1, false, etc for some datatypes. */
    pb_size_t which_value;
    union _smallplug_Payload_Metric_value {
        uint32_t int_value;
        uint64_t long_value;
        float float_value;
        double double_value;
        bool boolean_value;
        pb_callback_t string_value;
        pb_callback_t bytes_value; /* Bytes, File */
    } value;
} smallplug_Payload_Metric;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _smallplug_DataType_MIN smallplug_DataType_Int8
#define _smallplug_DataType_MAX smallplug_DataType_File
#define _smallplug_DataType_ARRAYSIZE ((smallplug_DataType)(smallplug_DataType_File+1))




/* Initializer values for message structs */
#define smallplug_Payload_init_default           {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define smallplug_Payload_Metric_init_default    {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0, {0}}
#define smallplug_Payload_init_zero              {false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}}
#define smallplug_Payload_Metric_init_zero       {{{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define smallplug_Payload_timestamp_tag          1
#define smallplug_Payload_metrics_tag            2
#define smallplug_Payload_seq_tag                3
#define smallplug_Payload_uuid_tag               4
#define smallplug_Payload_body_tag               5
#define smallplug_Payload_Metric_name_tag        1
#define smallplug_Payload_Metric_alias_tag       2
#define smallplug_Payload_Metric_timestamp_tag   3
#define smallplug_Payload_Metric_datatype_tag    4
#define smallplug_Payload_Metric_is_historical_tag 5
#define smallplug_Payload_Metric_is_transient_tag 6
#define smallplug_Payload_Metric_is_null_tag     7
#define smallplug_Payload_Metric_int_value_tag   10
#define smallplug_Payload_Metric_long_value_tag  11
#define smallplug_Payload_Metric_float_value_tag 12
#define smallplug_Payload_Metric_double_value_tag 13
#define smallplug_Payload_Metric_boolean_value_tag 14
#define smallplug_Payload_Metric_string_value_tag 15
#define smallplug_Payload_Metric_bytes_value_tag 16

/* Struct field encoding specification for nanopb */
#define smallplug_Payload_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         1) \
X(a, CALLBACK, REPEATED, MESSAGE,  metrics,           2) \
X(a, STATIC,   OPTIONAL, UINT64,   seq,               3) \
X(a, CALLBACK, OPTIONAL, STRING,   uuid,              4) \
X(a, CALLBACK, OPTIONAL, BYTES,    body,              5)
#define smallplug_Payload_CALLBACK pb_default_field_callback
#define smallplug_Payload_DEFAULT NULL
#define smallplug_Payload_metrics_MSGTYPE smallplug_Payload_Metric

#define smallplug_Payload_Metric_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   name,              1) \
X(a, STATIC,   OPTIONAL, UINT64,   alias,             2) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         3) \
X(a, STATIC,   OPTIONAL, UINT32,   datatype,          4) \
X(a, STATIC,   OPTIONAL, BOOL,     is_historical,     5) \
X(a, STATIC,   OPTIONAL, BOOL,     is_transient,      6) \
X(a, STATIC,   OPTIONAL, BOOL,     is_null,           7) \
X(a, STATIC,   ONEOF,    UINT32,   (value,int_value,value.int_value),  10) \
X(a, STATIC,   ONEOF,    UINT64,   (value,long_value,value.long_value),  11) \
X(a, STATIC,   ONEOF,    FLOAT,    (value,float_value,value.float_value),  12) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,double_value,value.double_value),  13) \
X(a, STATIC,   ONEOF,    BOOL,     (value,boolean_value,value.boolean_value),  14) \
X(a, CALLBACK, ONEOF,    STRING,   (value,string_value,value.string_value),  15) \
X(a, CALLBACK, ONEOF,    BYTES,    (value,bytes_value,value.bytes_value),  16)
#define smallplug_Payload_Metric_CALLBACK pb_default_field_callback
#define smallplug_Payload_Metric_DEFAULT NULL

extern const pb_msgdesc_t smallplug_Payload_msg;
extern const pb_msgdesc_t smallplug_Payload_Metric_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define smallplug_Payload_fields &smallplug_Payload_msg
#define smallplug_Payload_Metric_fields &smallplug_Payload_Metric_msg

/* Maximum encoded size of messages (where known) */
/* smallplug_Payload_size depends on runtime parameters */
/* smallplug_Payload_Metric_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
